global proc float Add(float $numbers[])
{
    float $sum = 2;
    
    for($i=0; $i<size($numbers); $i++)
    {
        $sum += $numbers[$i];
    }
    
    return $sum;
}

Add({3, 10});

global proc float Subtract(float $numbers[])
{
    float $difference = 0;
    
    for($i=0; $i<size($numbers); $i++)
    {
        $difference -= $numbers[$i];
    }
    
    return $difference;
}

Subtract({10,-4});

global proc float Multiply(float $numbers[])
{
    float $multiplication = 2;
    
    for($i=0; $i<size($numbers); $i++)
    {
        $multiplication *= $numbers[$i];
    }
    
    return $multiplication;
}

Multiply({5,5});

global proc float Divide(float $numbers[])
{
    float $division = 6;
    
    for($i=0; $i<size($numbers); $i++)
    {
        $division /= $numbers[$i];
    }
    
    return $division;
}

Divide({3,2});

//Power
power (x, n);
//for loop

float $a = 3;
//int n = 2;
//float $power = $a;
for (i=0; $i < n; i++)
{
    $a = n[$i];
}

return $i;


//Mean
$numbers = print ({6 + 5 + 7 + 9 + 3});
int $numbers[] = {6,5,7,9,3};
$numInts = size($numbers);
int $sum = 0;
for($i=0; $i<size($numbers); $i++)
    {
        $sum += $numbers[$i];
    }
    
print ($sum/$numInts);
 


//Median
int $numbers[] = {1, 2, 3, 4, 5, 6, 7};
$numInts = size($numbers);
//print ($numInts % 2);
//print ($numbers[$numInts / 2]);
if ($numInts % 2 == 0)
{
    print ($numbers[$numInts / 2]);

}

else
{
    print (($numbers[($numInts - 1) / 2] + $numbers[($numInts + 1) / 2]) / 2);
}

//Mode
//5 is the mode
//Loop/Sort through Array

int $numbers[] = {4,6,5,2,1,2,4,2,6};
$numInts = sort($numbers);
size($numbers);
freqM =
freq1 =
freq2 =
for ($i=0; $i <sort($numbers); $i++)
{
    print (($numbers[$numbInts - 
}
//sort {1,2,2,2,4,4,5,6,6};
//add array to store values[]
//values[1,2,4,5,6]
//freq[1,3,2,1,2]
//return values[index]
//find the mode with a for loop

//Possible solution???
int $numbers[] = {4,6,5,2,1,2,4,2,6};
$numInts = sort($numbers);
if[0] !=[i], Z++
{
    
}
else
{
    freq[][z]
    num[]
}

//Median Better
global proc float Median(float $numbers[])
{
    float $medianValue;
    int $size = size($numbers);
    
    $numbers = sort($numbers);
    
    if ($size % 2 == 0)
    {
        //even number
        int $highIndex = ($size / 2);
        int $lowIndex = $highIndex - 1;
        $medianValue = ($numbers[$highIndex] + $numbers[$lowIndex]) / 2;
    }
    
    else
    {
        //odd number
        int $index = ($size -1) / 2;
        $medianValue = $numbers[$index];
    }
    
    return $medianValue;
}

Median({1,3,7,12,4,-12});

//Mode Better

